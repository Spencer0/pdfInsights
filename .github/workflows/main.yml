# .github/workflows/main.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: spendage-backend
  FRONTEND_BUCKET: spendage-frontend-${{ github.ref_name }}
  STACK_NAME: spendage-${{ github.ref_name }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: |
          npm install
          cd packages/frontend && npm install
          cd ../backend && npm install
          
      - name: Run Tests
        run: |
          cd packages/frontend && npm test
          cd ../backend && npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build Backend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd packages/backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          
      - name: Build Frontend
        run: |
          cd packages/frontend
          npm install
          npm run build
          
      - name: Deploy Frontend to S3
        run: |
          aws s3 sync packages/frontend/build s3://${{ env.FRONTEND_BUCKET }}
          
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/cloudformation/main.yml \
            --stack-name ${{ env.STACK_NAME }} \
            --parameter-overrides \
              Environment=prod \
              ContainerImage=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
              FrontendBucketName=${{ env.FRONTEND_BUCKET }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Wait for ECS Service Stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.STACK_NAME }}-cluster-prod \
            --services ${{ env.STACK_NAME }}-service-prod